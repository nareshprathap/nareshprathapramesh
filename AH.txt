import jenkins.model.*
import hudson.PluginWrapper

def pluginManager = Jenkins.instance.pluginManager
def plugins = pluginManager.plugins

plugins.each { PluginWrapper plugin ->
    println "Plugin: ${plugin.shortName} (${plugin.getVersion()})"
    if (plugin.getDependencies()) {
        println "  Required Dependencies:"
        plugin.getDependencies().findAll { !it.optional }.each { dep ->
            println "    - ${dep.shortName} (version: ${dep.version})"
        }
    } else {
        println "  No dependencies."
    }
    println ""
}







here's a Groovy script you can run in the Jenkins Script Console to:

     * Get your installed plugin list

     * Compare it against a target Jenkins core version

     * Identify if newer plugin versions exist that are compatible with that target core

     * Generate a version-pinned list (plugins.txt style)



Groovy Script: Suggest Latest Compatible Plugin Versions


import groovy.json.JsonSlurper

def targetJenkinsVersion = "2.440.1"
def updateCenterUrl = 'https://updates.jenkins.io/current/update-center.actual.json'

// Fetch update center data
def json = new URL(updateCenterUrl).text
def updateData = new JsonSlurper().parseText(json)

println "Target Jenkins Version: ${targetJenkinsVersion}"
println "---- Suggested plugin upgrades compatible with Jenkins ${targetJenkinsVersion} ----"

def pluginManager = Jenkins.instance.pluginManager
def compatiblePlugins = []

pluginManager.plugins.each { plugin ->
    def pluginId = plugin.shortName
    def installedVersion = plugin.version
    def availablePluginData = updateData.plugins[pluginId]

    if (availablePluginData) {
        def latestVersion = availablePluginData.version
        def requiredCore = availablePluginData.requiredCore ?: "1.0"

        if (new hudson.util.VersionNumber(requiredCore) <= new hudson.util.VersionNumber(targetJenkinsVersion)) {
            compatiblePlugins << "${pluginId}:${latestVersion}"
            println "${pluginId}:${latestVersion} (was ${installedVersion}, requires Jenkins ${requiredCore})"
        } else {
            println "[SKIPPED] ${pluginId}:${latestVersion} requires Jenkins ${requiredCore} > ${targetJenkinsVersion}"
        }
    } else {
        println "[WARNING] Plugin ${pluginId} not found in update center"
    }
}

println "\n--- Version-pinned plugins.txt output (copy below) ---"
compatiblePlugins.each { println it }



What It Does:

    * Reads your installed plugins

    * Fetches latest metadata from the Jenkins update center

    * Checks whether the latest version of each plugin is compatible with your target Jenkins version

    * Outputs a safe-to-use plugins.txt list

How to Use:

    * Go to Manage Jenkins > Script Console

    * Paste and run the script

    * Copy the final plugins.txt list

    * Use it with jenkins-plugin-cli in your Docker build or upgrade process














When you’re upgrading your Jenkins core version, choosing the correct plugin versions is critical to ensure compatibility, prevent failures, and avoid downtime.

Here’s a structured way to identify and upgrade to the correct plugin versions that match your target Jenkins core version:
Step-by-Step: Identifying Correct Plugin Versions for New Jenkins Core
1. Define Your Target Jenkins Core Version

Example: You're upgrading from 2.387.2 to 2.440.1.
2. Get a List of Currently Installed Plugins
Via Jenkins Script Console:

Jenkins.instance.pluginManager.plugins.each {
    println "${it.getShortName()}:${it.getVersion()} (requires Jenkins ${it.getRequiredCore()})"
}

Save this list — it’s your starting point.
3. Use the Jenkins Update Center to Get Compatible Versions

There are three effective ways to check compatibility:
Option A: Use jenkins-plugin-cli to Auto-Resolve Compatible Versions

If you have a plugins.txt file:

jenkins-plugin-cli --plugin-file plugins.txt --jenkins-version 2.440.1 --latest true

This downloads the latest plugin versions compatible with Jenkins 2.440.1, including dependencies.

You can also resolve versions without downloading:

jenkins-plugin-cli --plugin-file plugins.txt --jenkins-version 2.440.1 --available-updates

Option B: Use the Jenkins Plugin Site (Manual Check)

    Visit: https://plugins.jenkins.io

    Search for each plugin

    Scroll to "Version History"

    Pick the latest version that supports your target core version (e.g., 2.440.1)

Option C: Use Update Center JSON

Pull the actual update center data (contains core compatibility info):

curl https://updates.jenkins.io/current/update-center.actual.json

You can parse this to:

    Get all available plugin versions

    Check each version's requiredCore

    Useful for scripting automated validation.

4. Generate a Clean plugins.txt

After identifying compatible versions, generate a clean version-pinned file:

git:5.2.1
docker-workflow:572.v950f58993843
workflow-job:1347.vb_1d474d4b_40c

Pinning specific versions ensures stability and reproducibility during upgrades.
5. Test in a Staging Jenkins Instance

Before applying to production:

    Build a Jenkins Docker container with your new plugins.txt

    Run Jenkins with the new core

    Import jobs and test builds

This minimizes surprises during the actual upgrade.
Bonus: Groovy Script to Flag Incompatible Plugins

def targetVersion = new hudson.util.VersionNumber("2.440.1")

Jenkins.instance.pluginManager.plugins.each {
    if (it.getRequiredCore().isNewerThan(targetVersion)) {
        println "[WARN] ${it.getShortName()}:${it.getVersion()} requires Jenkins ${it.getRequiredCore()} (target: ${targetVersion})"
    }
}

TL;DR (Quick Checklist):
Step	Task
1	Identify your target Jenkins core version
2	Export list of currently installed plugins
3	Use jenkins-plugin-cli or plugin site to find compatible versions
4	Create a version-pinned plugins.txt
5	Test everything in a staging Jenkins
6	Upgrade Jenkins core in production







if you're planning to upgrade your Jenkins core version and already have a set of installed plugins, it’s crucial to verify compatibility to avoid breaking your jobs or pipelines.

Here’s a step-by-step guide to verify that your new Jenkins core version is compatible with your currently installed plugins.
Step 1: Get Your Current Plugin List with Required Core
Option A: Use Jenkins Script Console

Run this Groovy script:

Jenkins.instance.pluginManager.plugins.each {
    println "${it.getShortName()}:${it.getVersion()} (requires Jenkins ${it.getRequiredCore()})"
}

It prints:

git:5.2.1 (requires Jenkins 2.375.1)
workflow-aggregator:596.v8c21c963d92d (requires Jenkins 2.361.1)

    Save this list — you’ll use it to compare with your target Jenkins core version.

Step 2: Decide the Target Jenkins Version

Example: you're planning to upgrade from 2.387.2 to 2.440.1.
Step 3: Check Compatibility for Each Plugin

Use one of these methods:
Option A: Groovy Script to Highlight Incompatible Plugins

Run this in script console before upgrading Jenkins:

def targetCore = new hudson.util.VersionNumber("2.440.1")

Jenkins.instance.pluginManager.plugins.each {
    def requiredCore = it.getRequiredCore()
    if (requiredCore && requiredCore.isNewerThan(targetCore)) {
        println "[INCOMPATIBLE] ${it.getShortName()}:${it.getVersion()} requires Jenkins ${requiredCore}"
    }
}

    This will warn you if any plugin requires a Jenkins core higher than your upgrade target, or if plugin will break after upgrading.

Option B: Use jenkins-plugin-cli for Pre-Validation (Recommended for Docker)

If you're using plugins.txt or managing plugins declaratively:

jenkins-plugin-cli --plugin-file plugins.txt --jenkins-version 2.440.1

This:

    Verifies that each plugin in plugins.txt supports Jenkins 2.440.1

    Will error if any plugin is incompatible

Option C: Manually Check via Plugin Site

    Go to https://plugins.jenkins.io

    Search for each plugin

    Check the required Jenkins core for your installed version

Step 4: Update Plugins if Needed

If some plugins are incompatible:

    Upgrade them first while still on the old Jenkins version

    Then upgrade Jenkins core

    Some plugin upgrades include migration steps that work better before core upgrade.

Step 5: Backup and Test Before Upgrade

Before upgrading:

    Backup $JENKINS_HOME (configs, jobs, credentials, plugins)

    Test the upgrade in a staging environment with the same plugin/core versions

    Confirm builds, jobs, pipelines, credentials work as expected

Summary Flow:

[Export plugin list] → [Pick target Jenkins core version]
          ↓
[Compare requiredCore of plugins vs target version]
          ↓
[Upgrade plugins if needed] → [Test in staging]
          ↓
        [Upgrade Jenkins core in prod]





OpenShift Deployment Strategies (Detailed Explanation)

When you update an application in OpenShift (e.g., new version, config changes), how OpenShift replaces the old version with the new one is called a Deployment Strategy.

The main deployment strategies are:

    Recreate

    Rolling

    Blue-Green (manual in OpenShift)

    Canary (manual or progressive in OpenShift)

    Custom (user-defined scripts/hooks)

Each has its use cases, pros/cons, and behaviors.
1. 🔥 Recreate Strategy

    What happens?
    OpenShift completely shuts down the old version (all pods), then starts the new version.

    Steps:

        Scale old pods to 0.

        Deploy new pods.

    Use Cases:

        Applications that can't handle two versions running together (stateful apps, DBs, caches).

        Big changes to the database schema.

        Memory-heavy apps where running both old and new together is too resource-consuming.

    Pros:

        Clean environment.

        No version conflicts.

    Cons:

        Downtime during deployment (app is not available between old shutting down and new starting).

    OpenShift Config Example:

    strategy:
      type: Recreate

2. 🔄 Rolling Strategy (default)

    What happens?
    OpenShift gradually replaces old pods with new ones — one by one (or a few at a time).

    Steps:

        Spin up a few new pods.

        Remove a few old pods.

        Continue until all old pods are gone.

    Use Cases:

        Web apps, APIs, and services that must remain available during deployments.

    Pros:

        Zero downtime (ideally).

        Can configure batch size (how many pods to update at a time).

    Cons:

        Both old and new versions may temporarily coexist — you need to ensure backward compatibility.

    OpenShift Config Example:

    strategy:
      type: Rolling
      rollingParams:
        maxSurge: 25%   # How many extra pods to add
        maxUnavailable: 25%  # How many pods can be unavailable during update

    maxSurge and maxUnavailable can be numbers or percentages.

3. 🧢 Blue-Green Deployment (Manual Setup)

    What happens?
    You deploy the new version side-by-side with the old version (in parallel), but don't switch traffic immediately.

    Steps:

        Deploy new version (in a separate deployment or environment).

        Test it thoroughly.

        Manually switch the service route to point to the new deployment.

        If something breaks, quickly rollback by pointing the route back.

    Use Cases:

        Critical applications where downtime or bad releases are very costly.

        Systems requiring zero-risk deployments.

    Pros:

        No impact on users until you’re ready.

        Instant rollback (just re-route traffic).

    Cons:

        Consumes more resources (old + new run at the same time).

        Needs extra automation or manual steps.

    In OpenShift:

        Typically done with two deployments and managing routes manually or via pipelines.

4. 🐤 Canary Deployment (Progressive Rollout)

    What happens?
    OpenShift (or you manually) rolls out the new version to a small % of users first.
    If it goes well, you gradually shift more traffic to the new version.

    Steps:

        Deploy new version alongside old one.

        Split traffic (e.g., 5% to new, 95% to old).

        Monitor.

        Increase to 50-50, then 100% as confidence grows.

    Use Cases:

        Risky features or critical systems needing early validation without full exposure.

    Pros:

        Minimized risk.

        Quick rollback (shift all traffic back).

    Cons:

        Needs traffic splitting (either manually, through OpenShift Routes, or external tools like Istio, Service Mesh).

        Slightly complex setup.

    In OpenShift:

        You usually create two deployments.

        Use routes or service mesh to split traffic.

5. 🛠️ Custom Deployment Strategy

    What happens?
    You define your own deployment scripts and lifecycle hooks.

    How:

        Add custom pre, mid, or post-deployment logic.

        Example: Database migrations, cache warming, sending notifications.

    OpenShift Config Example:

    strategy:
      type: Custom
      customParams:
        image: my-custom-deployer-image
        command:
          - /bin/my-custom-deploy-script

    Use Cases:

        Very complex apps where standard strategies aren’t enough.

🧠 Quick Comparison Table
Strategy	Downtime	Risk	Resources Needed	Complexity	Best For
Recreate	Yes	Medium	Low	Simple	State-sensitive apps
Rolling	No	Medium	Medium	Moderate	Web services
Blue-Green	No	Low	High	High	Critical apps
Canary	No	Low	High	High	Experimental features
Custom	Varies	Varies	Varies	Very High	Complex apps
